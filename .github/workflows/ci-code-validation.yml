name: CI - Code Validation

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'application/**'
      - 'kubernetes/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  actions: read
  checks: write
jobs:
  validate:
    name: Code Validation (Test → Quality → Build)
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}

    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_DB: astro_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        cd application/data-simulator
        pip install -r requirements.txt
        pip install pytest pytest-cov

#    - name: Run Python tests
#      run: |
#        cd application/data-simulator
#        pytest tests/ --cov=. --cov-report=xml --cov-report=term-missing

    - name: Make gradlew executable
      run: |
        find . -name "gradlew" -exec chmod +x {} \;

    - name: Run unit tests (H2)
      run: |
        cd application
        ./gradlew test
      env:
        SPRING_PROFILES_ACTIVE: test
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1

    - name: Run integration tests (PostgreSQL)
      run: |
        cd application
        ./gradlew integrationTest
      env:
        SPRING_PROFILES_ACTIVE: ci-integration
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/astro_test
        SPRING_DATASOURCE_USERNAME: test_user
        SPRING_DATASOURCE_PASSWORD: test_password
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results
        path: application/*/build/test-results/*/TEST-*.xml
        reporter: java-junit

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          application/*/build/reports/tests/
          application/*/build/test-results/
          application/*/build/reports/jacoco/
        retention-days: 30
        if-no-files-found: warn

    # ========== Code Quality Analysis ==========

    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Run Checkstyle
      run: |
        cd application && ./gradlew checkstyleMain checkstyleTest

    - name: Run SpotBugs
      run: |
        cd application && ./gradlew spotbugsMain spotbugsTest

    - name: SonarCloud Scan
      # FIXME remove env!
      run: |
        cd application
        ls -R . | grep ".xml"
        env
        # disable until we can pass the quality gate for code coverage 
        # ./gradlew test jacocoTestReport sonar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SPRING_PROFILES_ACTIVE: ci-integration
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/astro_test
        SPRING_DATASOURCE_USERNAME: test_user
        SPRING_DATASOURCE_PASSWORD: test_password
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1


      # ========== Build Applications (No Image Publishing) ==========

    - name: Build
      run: |
        cd application
        ./gradlew clean build -x test

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          application/*/build/libs/*.jar
          application/*/build/distributions/*
        retention-days: 7
        if-no-files-found: warn

    # ========== Security Scanning (Dependencies Only) ==========

#    - name: Run Snyk to check for dependency vulnerabilities
#      uses: snyk/actions/gradle@master
#      env:
#        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#        # TODO why is snyk complaining about JAVA_HOME?
#        JAVA_HOME: ${{ $(dirname $(dirname $(readlink -f $(which javac)))) }}
#      with:
#        args: --severity-threshold=high --all-projects