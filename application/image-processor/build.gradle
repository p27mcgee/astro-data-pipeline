ext {
    nomTamVersion = '1.20.0'
    awsSdkVersion = '2.21.29'
}

dependencies {
    // Image processor specific dependencies
    implementation 'org.springframework.boot:spring-boot-starter-batch'

    // AWS SDK
    implementation platform("software.amazon.awssdk:bom:${awsSdkVersion}")
    implementation 'software.amazon.awssdk:s3'
    implementation 'software.amazon.awssdk:secretsmanager'
    implementation 'software.amazon.awssdk:cloudwatch'

    // FITS File Processing
    implementation "gov.nasa.gsfc.heasarc:nom-tam-fits:${nomTamVersion}"
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'org.apache.commons:commons-imaging:1.0.0-alpha5'

    // Image Processing
    implementation 'org.bytedeco:javacv:1.5.9'
    implementation 'org.bytedeco:opencv:4.7.0-1.5.9'
    implementation 'org.bytedeco:javacv-platform:1.5.9'

    // Additional monitoring
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave'

    // Async Processing
    implementation 'org.springframework:spring-context'
    implementation 'org.springframework.retry:spring-retry'

    // Testing
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'com.h2database:h2'
    testImplementation "org.testcontainers:localstack:${testcontainersVersion}"
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
}


// Application context verification tests
tasks.register('contextVerificationTest', Test) {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'application-context-test'

    include '**/*ApplicationContextIT*'
    include '**/*ContextVerification*'

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }

    // Ensure clean context for each test
    systemProperty 'spring.test.context.cache.maxSize', '1'
}


// Performance Tests
tasks.register('performanceTest', Test) {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'performance-test'

    include '**/*PerformanceTest*'
    include '**/*LoadTest*'

    maxHeapSize = "2g"
    jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=200'

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}


// Docker build task
tasks.register('buildDocker', Exec) {
    dependsOn build
    workingDir '.'
    commandLine 'docker', 'build', '-t', "astro-image-processor:${version}", '.'
}

// Custom task to generate FITS test data
tasks.register('generateTestData', JavaExec) {
    mainClass = 'org.stsci.astro.processor.util.TestDataGenerator'
    classpath = sourceSets.main.runtimeClasspath
    args = ['--output-dir', 'src/test/resources/fits-data', '--count', '10']
}

// Performance profiling task
tasks.register('profile', JavaExec) {
    mainClass = 'org.stsci.astro.processor.ImageProcessorApplication'
    classpath = sourceSets.main.runtimeClasspath
    systemProperty 'spring.profiles.active', 'profiling'
    jvmArgs '-XX:+FlightRecorder',
            '-XX:StartFlightRecording=duration=300s,filename=image-processor-profile.jfr',
            '-XX:+UnlockExperimentalVMOptions',
            '-XX:+UseG1GC'
}

// Dependency vulnerability check
tasks.register('dependencyCheck', Exec) {
    commandLine 'gradle', 'dependencyCheckAnalyze'
}

// Clean task customization
clean {
    delete 'logs'
    delete 'image-processor-profile.jfr'
}

// Build optimization
compileJava {
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

springBoot {
    mainClass = 'org.stsci.astro.processor.ImageProcessorApplication'
}

// Application properties for build
ext {
    dockerRegistry = project.findProperty('dockerRegistry') ?: 'localhost:5000'
    imageTag = project.findProperty('imageTag') ?: version
}

// Multi-stage build support
tasks.register('buildMultiArch', Exec) {
    dependsOn build
    workingDir '.'
    commandLine 'docker', 'buildx', 'build',
            '--platform', 'linux/amd64,linux/arm64',
            '-t', "${dockerRegistry}/astro-image-processor:${imageTag}",
            '--push', '.'
}