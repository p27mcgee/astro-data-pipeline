plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'
}

group = 'org.stsci.astro'
version = '1.0.0'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo1.maven.org/maven2/' }
}

ext {
    springCloudVersion = '2022.0.4'
    testcontainersVersion = '1.19.1'
    awsSdkVersion = '2.21.29'
    micrometerVersion = '1.12.0'
}

dependencies {
    // Spring Boot Core
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    
    // Spring Cloud AWS
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.0.3'
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-secrets-manager:3.0.3'
    
    // Database
    implementation 'org.postgresql:postgresql:42.6.0'
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'org.flywaydb:flyway-core'
    
    // PostGIS for spatial data
    implementation 'net.postgis:postgis-jdbc:2.5.1'
    implementation 'org.hibernate:hibernate-spatial:6.2.13.Final'
    
    // Astronomical Coordinate Systems
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'gov.nasa.gsfc.heasarc:nom-tam-fits:1.20.0'
    
    // Search and Indexing
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    
    // Metrics and Monitoring
    implementation "io.micrometer:micrometer-registry-cloudwatch2:${micrometerVersion}"
    implementation "io.micrometer:micrometer-registry-prometheus:${micrometerVersion}"
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    
    // JSON Processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    
    // Utilities
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'com.google.guava:guava:32.1.3-jre'
    
    // Configuration
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    testImplementation "org.testcontainers:elasticsearch:${testcontainersVersion}"
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.0'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'test'
    exclude '**/*IntegrationTest*'
    exclude '**/*IT*'
    finalizedBy jacocoTestReport
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'integration-test'
    include '**/*IntegrationTest*'
    include '**/*IT*'
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test, integrationTest
    reports {
        xml.required = true
        html.required = true
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/config/**',
                '**/dto/**',
                '**/entity/**',
                '**/*Application*',
                '**/*Config*'
            ])
        }))
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "astro-data-pipeline-catalog-service"
        property "sonar.projectName", "Astronomical Data Pipeline - Catalog Service"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
    }
}

springBoot {
    buildInfo()
    mainClass = 'org.stsci.astro.catalog.CatalogServiceApplication'
}

task buildDocker(type: Exec) {
    dependsOn build
    workingDir '.'
    commandLine 'docker', 'build', '-t', "astro-catalog-service:${version}", '.'
}